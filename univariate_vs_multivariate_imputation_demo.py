# -*- coding: utf-8 -*-
"""Univariate vs. Multivariate Imputation Demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cmuah0PIQg82zukaLKXGf51H7E9hG1GO

## Univariate vs. Multivariate Imputation


##### One type of imputation algorithm is univariate, which imputes values in the i-th feature dimension using only non-missing values in that feature dimension (e.g. impute.SimpleImputer). By contrast, multivariate imputation algorithms use the entire set of available feature dimensions to estimate the missing values (e.g. impute.IterativeImputer).

## Univariate feature imputation

##### The SimpleImputer class provides basic strategies for imputing missing values. Missing values can be imputed with a provided constant value, or using the statistics (mean, median or most frequent) of each column in which the missing values are located.

* Mean Imputation (If you do not have outliers)
  * Median Is Better 
  * Mode Imputation Is Another Approach
  * Constant
  * Most_frequent
"""

def generate_date():
  import pandas as pd
  import numpy  as np
  df = pd.DataFrame({
      'age': [25,27,29,31,33,35],
      'experience': [np.nan, 3,5,7,9,11],
      'salary': [50, np.nan, 110,140,170,500],
      'purchased' : [0,1,1,0,1,0]
  })
  return(df)

df = generate_date()
display(df)

"""## REF
** https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html

## Mean
"""

import numpy as np
from sklearn.impute import SimpleImputer
imp = SimpleImputer(missing_values=np.nan, strategy='mean')
pd.DataFrame(imp.fit_transform(df),columns=['age', 'experience', 'salary', 'purchased'])

"""### Median"""

df = generate_date()
display(df)

import numpy as np
from sklearn.impute import SimpleImputer
imp = SimpleImputer(missing_values=np.nan, strategy='median')
#pd.DataFrame(imp.fit_transform(df[['salary']]))
pd.DataFrame(imp.fit_transform(df),columns=df.columns)

df = generate_date()
display(df)

import numpy as np
from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy='median', missing_values=np.nan, add_indicator=True)
temp_df = pd.DataFrame(imp.fit_transform(df[['salary']]), columns=['salary', 'salary_imputer_ind'])
# replace the original salary column with the imputed values
df.loc[:, 'salary'] = temp_df.loc[:, 'salary']
# concatenate the imputed dataframe with the original dataframe
df = pd.concat([df, temp_df['salary_imputer_ind']], axis=1)
df

"""## Constant"""

df = generate_date()
display(df)

import numpy as np
from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy='constant', fill_value=130, add_indicator=True)
temp_df = pd.DataFrame(imp.fit_transform(df[['salary']]), columns=['salary', 'salary_imputer_ind'])
#pd.DataFrame(imp.fit_transform(df[['experience']]), columns=['experience', 'experience_imputer_ind'])
# replace the original salary column with the imputed values
df.loc[:, 'salary'] = temp_df.loc[:, 'salary']
# concatenate the imputed dataframe with the original dataframe
df = pd.concat([df, temp_df['salary_imputer_ind']], axis=1)
df

"""## IterativeImputer"""

df = generate_date()
display(df)

df[['age','experience','salary']].corr()

df = df[['age','experience','salary']]

import numpy as np
from sklearn.experimental import enable_iterative_imputer
from sklearn import linear_model
from sklearn.impute import IterativeImputer
imp = IterativeImputer(max_iter=10, random_state=0)
pd.DataFrame(imp.fit_transform(df),columns=df.columns)

df = generate_date()
display(df)

import numpy as np
from sklearn.experimental import enable_iterative_imputer
from sklearn import linear_model
from sklearn.impute import IterativeImputer
imp = IterativeImputer(estimator=linear_model.LinearRegression(), n_nearest_features=None, imputation_order='ascending')
pd.DataFrame(imp.fit_transform(df),columns=df.columns)

df = generate_date()
display(df)

import numpy as np
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import KNNImputer
imp = KNNImputer(n_neighbors = 1)
pd.DataFrame(imp.fit_transform(df),columns=df.columns)

#nan_Eucledian Distance - Replace by matching row's value

